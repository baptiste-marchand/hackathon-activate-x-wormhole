[{"C:\\Users\\33768\\Documents\\Projets\\Algo\\dapp\\hackathon-algorand-front\\src\\index.js":"1","C:\\Users\\33768\\Documents\\Projets\\Algo\\dapp\\hackathon-algorand-front\\src\\AlgorandTransaction.tsx":"2","C:\\Users\\33768\\Documents\\Projets\\Algo\\dapp\\hackathon-algorand-front\\src\\header.tsx":"3","C:\\Users\\33768\\Documents\\Projets\\Algo\\dapp\\hackathon-algorand-front\\src\\App.js":"4"},{"size":322,"mtime":1653199236123,"results":"5","hashOfConfig":"6"},{"size":2514,"mtime":1653199236115,"results":"7","hashOfConfig":"6"},{"size":2433,"mtime":1653223224586,"results":"8","hashOfConfig":"6"},{"size":9792,"mtime":1653223806797,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8uq82z",{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"14","messages":"15","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\33768\\Documents\\Projets\\Algo\\dapp\\hackathon-algorand-front\\src\\index.js",[],"C:\\Users\\33768\\Documents\\Projets\\Algo\\dapp\\hackathon-algorand-front\\src\\AlgorandTransaction.tsx",[],"C:\\Users\\33768\\Documents\\Projets\\Algo\\dapp\\hackathon-algorand-front\\src\\header.tsx",["19","20","21"],"import * as React from 'react';\r\nimport Box from '@mui/material/Box';\r\nimport InputLabel from '@mui/material/InputLabel';\r\nimport MenuItem from '@mui/material/MenuItem';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport Select, { SelectChangeEvent } from '@mui/material/Select';\r\nimport {useState} from \"react\";\r\nimport './index.css';\r\n\r\nexport default function Header() {\r\n    const [blockchain, setBlockchain] = React.useState('Polygon');\r\n    const blockchains = ['Polygon', 'Ethereum'];\r\n    \r\n\r\n    const handleChange = (event: SelectChangeEvent) => {\r\n        setBlockchain(event.target.value as string);\r\n    };\r\n\r\n    const [currentAccount, setCurrentAccount] = useState<any>();\r\n\r\n    const connectWallet = async () => {\r\n        const { ethereum } = window;\r\n        if (!ethereum) {\r\n            alert(\"Get MetaMask!\");\r\n            return;\r\n        }\r\n        const accounts = await ethereum.request({\r\n            method: \"eth_requestAccounts\",\r\n        });\r\n        setCurrentAccount(accounts[0]);\r\n    };\r\n\r\n    return (\r\n        <header>\r\n            <Box sx={{ maxWidth: 160 }}>\r\n                <FormControl fullWidth>\r\n                    <InputLabel className=\"blockchain-selector\">{\"Blockchain\"}</InputLabel>\r\n                    <Select className=\"menuItem\"\r\n                        IconComponent={() => (\r\n                            <img className=\"blockchain-logo\" src={`/images/${blockchain}.png`}/>\r\n                        )}\r\n                        id=\"blockchain-selector\"\r\n                        value={blockchain}\r\n                        label=\"Select blockchain\"\r\n                        onChange={handleChange}\r\n                    >\r\n                    <MenuItem value={\"Polygon\"} className=\"menuItem\">Polygon</MenuItem>\r\n                    <MenuItem value={\"Ethereum\"}>Ethereum</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n            </Box>\r\n            <img src='/images/logoB.png' width={220}/   >\r\n            <button\r\n                className=\"connect\"\r\n                onClick={connectWallet}\r\n                disabled={currentAccount}\r\n            >\r\n                {currentAccount\r\n                    ? `${currentAccount.substring(0, 6)}...${currentAccount.substring(\r\n                        currentAccount.length - 5\r\n                    )}`\r\n                    : \"Connect wallet\"}\r\n            </button>\r\n        </header>\r\n    );\r\n}\r\n","C:\\Users\\33768\\Documents\\Projets\\Algo\\dapp\\hackathon-algorand-front\\src\\App.js",["22","23","24","25","26","27","28","29","30","31","32","33","34","35"],{"ruleId":"36","severity":1,"message":"37","line":12,"column":11,"nodeType":"38","messageId":"39","endLine":12,"endColumn":22},{"ruleId":"40","severity":1,"message":"41","line":40,"column":29,"nodeType":"42","endLine":40,"endColumn":97},{"ruleId":"40","severity":1,"message":"41","line":52,"column":13,"nodeType":"42","endLine":52,"endColumn":58},{"ruleId":"43","severity":1,"message":"44","line":4,"column":33,"nodeType":"38","messageId":"39","endLine":4,"endColumn":42},{"ruleId":"43","severity":1,"message":"45","line":5,"column":8,"nodeType":"38","messageId":"39","endLine":5,"endColumn":16},{"ruleId":"43","severity":1,"message":"46","line":34,"column":7,"nodeType":"38","messageId":"39","endLine":34,"endColumn":22},{"ruleId":"43","severity":1,"message":"47","line":52,"column":7,"nodeType":"38","messageId":"39","endLine":52,"endColumn":18},{"ruleId":"43","severity":1,"message":"48","line":72,"column":7,"nodeType":"38","messageId":"39","endLine":72,"endColumn":16},{"ruleId":"43","severity":1,"message":"49","line":95,"column":7,"nodeType":"38","messageId":"39","endLine":95,"endColumn":24},{"ruleId":"40","severity":1,"message":"41","line":214,"column":13,"nodeType":"42","endLine":217,"endColumn":15},{"ruleId":"40","severity":1,"message":"41","line":225,"column":13,"nodeType":"42","endLine":229,"endColumn":15},{"ruleId":"40","severity":1,"message":"41","line":256,"column":15,"nodeType":"42","endLine":260,"endColumn":17},{"ruleId":"40","severity":1,"message":"41","line":261,"column":15,"nodeType":"42","endLine":265,"endColumn":17},{"ruleId":"40","severity":1,"message":"41","line":271,"column":15,"nodeType":"42","endLine":275,"endColumn":17},{"ruleId":"40","severity":1,"message":"41","line":276,"column":15,"nodeType":"42","endLine":280,"endColumn":17},{"ruleId":"40","severity":1,"message":"41","line":286,"column":15,"nodeType":"42","endLine":290,"endColumn":17},{"ruleId":"40","severity":1,"message":"41","line":291,"column":15,"nodeType":"42","endLine":295,"endColumn":17},"@typescript-eslint/no-unused-vars","'blockchains' is assigned a value but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'useEffect' is defined but never used.","'AlgoCall' is defined but never used.","'CheckAlgoSigner' is assigned a value but never used.","'GetAccounts' is assigned a value but never used.","'GetParams' is assigned a value but never used.","'GetAppGlobalState' is assigned a value but never used."]